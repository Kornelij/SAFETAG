{"version":3,"sources":["webpack:///./src/pages/activities.js","webpack:///./src/styles/card.js","webpack:///./src/styles/inpage.js"],"names":["MethodHeadline","styled","InpageHeadline","media","mediumUp","ActivityCard","Card","CardHeading","Activities","data","useTranslation","useSuspense","approaches","edges","approachNodes","forEach","approach","node","frontmatter","title","icon","fields","slug","replace","columnLayout","size","variation","withDeco","i18nKey","activities","map","index","summary","key","border","as","Link","to","withHover","short_summary","frontmattermd","excerpt","query","getCardBorder","themeVal","article","glsp","_lighten","css","CardHeader","div","Heading","CardList","ul","listReset","smallUp","largeUp","Inpage","InpageInnerColumns","Constrainer","InpageHeader","header","isHidden","visuallyHidden","InpageHeaderInner","InpageTitle","props","InpageBody","p","headingAlt","section","InpageBodyInner"],"mappings":"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","file":"component---src-pages-activities-js-b7805adc43b372cad0b9.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport styled from \"styled-components\"\nimport { graphql } from \"gatsby\"\nimport { Link, Trans, useTranslation } from 'gatsby-plugin-react-i18next';\n\nimport GlobalLayout from \"../components/layouts/global-layout\"\nimport SEO from \"../components/seo\"\n\nimport {\n  Inpage,\n  InpageInnerColumns,\n  InpageHeader,\n  InpageHeadline,\n  InpageBody,\n  InpageBodyInner,\n  InpageTitle,\n} from \"../styles/inpage\"\nimport Card, { CardHeading, CardList } from \"../styles/card\"\nimport media from \"../styles/utils/media-queries\"\n\nconst MethodHeadline = styled(InpageHeadline)`\n  ${media.mediumUp`\n    grid-column: span 2;\n  `}\n`\n\nconst ActivityCard = styled(Card)`\n  > :last-child:not(:first-child) {\n    padding-top: 0;\n  }\n  ${CardHeading} {\n    &:after {\n      content: \"_\";\n    }\n  }\n`\n\nfunction Activities({ data }) {\n  useTranslation('site', { useSuspense: false });\n  let approaches = data.approaches.edges\n  const approachNodes = {}\n  approaches.forEach(\n    approach =>\n      (approachNodes[approach.node.frontmatter.title] = {\n        title: approach.node.frontmatter.title,\n        icon: `/img/${approach.node.fields.slug.replace('/approaches/', '')}_icon.png`\n      })\n  )\n\n  return (\n    <GlobalLayout>\n      <SEO title=\"Activities\" />\n      <Inpage>\n        <InpageHeader>\n          <InpageInnerColumns columnLayout=\"3:1\">\n            <MethodHeadline>\n              <InpageTitle size=\"jumbo\" variation=\"primary\" withDeco>\n                <Trans i18nKey=\"activities-title\">Activities</Trans>\n              </InpageTitle>\n            </MethodHeadline>\n          </InpageInnerColumns>\n        </InpageHeader>\n        <InpageBody>\n          <InpageBodyInner>\n            <CardList>\n              {data.activities.edges.map(\n                ({ node }, index) =>\n                  node.fields != null &&\n                  node.frontmatter.summary && (\n                    <li key={index}>\n                      <ActivityCard\n                        variation=\"secondary\"\n                        border=\"primary\"\n                        as={Link}\n                        to={node.fields.slug}\n                        withHover\n                      >\n                        <CardHeading variation=\"primary\">\n                          {node.frontmatter.approaches.map((approach, index) => {\n                            if (approachNodes[approach]) {\n                              <img key={`approach-${index}`} src={approachNodes[approach].icon} />\n                            }\n                          })}\n                          { node.frontmatter.title }\n                        </CardHeading>\n                        <p>\n                          {\n                            node.frontmatter.short_summary ? node.frontmatter.short_summary\n                              : node.fields.frontmattermd.summary.excerpt\n                          }\n                        </p>\n                      </ActivityCard>\n                    </li>\n                  )\n              )}\n            </CardList>\n          </InpageBodyInner>\n        </InpageBody>\n      </Inpage>\n    </GlobalLayout>\n  )\n}\n\nActivities.propTypes = {\n  data: PropTypes.array,\n}\n\nexport default Activities\n\nexport const query = graphql`\n  query($language: String!) {\n    activities: allMarkdownRemark(\n      filter: {fileAbsolutePath: {regex: \"/activities//\"}, fields: {langKey: {eq: $language}}},\n      sort: { fields: [frontmatter___position, frontmatter___title],  },\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            frontmattermd {\n              summary { excerpt }\n            }\n          }\n          frontmatter {\n            title\n            summary\n            position\n            approaches\n            short_summary\n          }\n        }\n      }\n    }\n    approaches: allMarkdownRemark(\n      filter: {fileAbsolutePath: {regex: \"/approaches//\"}}\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n          html\n        }\n      }\n    }\n    locales: allLocale(filter: {language: {eq: $language}}) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`\n","import styled, { css } from \"styled-components\"\nimport { themeVal } from \"./utils/general\"\nimport media from \"./utils/media-queries\"\nimport { glsp, _lighten } from \"./utils/theme-values\"\nimport { listReset } from \"./helpers/index\"\nimport Heading from \"./type/heading\"\n\nconst getCardBackground = ({ variation }) => {\n  if (variation === \"base\") return _lighten(0.75, themeVal(\"color.base\"))\n  if (variation === \"primary\") return _lighten(0.5, themeVal(\"color.primary\"))\n  if (variation === \"secondary\")\n    return _lighten(0.525, themeVal(\"color.secondary\"))\n  if (variation === \"white\") return _lighten(themeVal(0.5, \"color.surface\"))\n  if (variation === \"outline\") return \"transparent\"\n  return \"white\"\n}\n\nconst getCardBorder = ({ border }) => {\n  if (border === \"base\") return themeVal(\"color.base\")\n  if (border === \"primary\") return themeVal(\"color.primary\")\n  if (border === \"secondary\") return themeVal(\"color.secondary\")\n  if (border === \"white\") return themeVal(\"color.surface\")\n  return \"inherit\"\n}\n\nconst Card = styled.article`\n  padding: ${glsp(2)} ${glsp(1.5)};\n  display: flex;\n  flex-flow: column;\n  color: ${themeVal(\"color.base\")};\n  background: ${getCardBackground};\n  position: relative;\n  ${({ border }) =>\n    border &&\n    css`\n      border: 2px solid ${getCardBorder};\n    `}\n  & > :last-child:not(:first-child) {\n    padding-top: ${glsp(2)};\n  }\n  &:visited {\n    color: ${themeVal(\"color.base\")};\n  }\n  a,\n  a:visited {\n    color: ${themeVal(\"color.link\")};\n  }\n\n  h1, h2, h3 {\n    margin: 0;\n  }\n  /* offset box outline on hover style requires 'withHover' prop */\n  ${({ withHover }) =>\n    withHover &&\n    css`\n      &:after {\n        position: absolute;\n        content: \"\";\n        opacity: 0;\n        width: 100%;\n        height: 100%;\n        left: 0;\n        top: 0;\n        z-index: -1;\n        border: 2px solid ${getCardBorder};\n        background: none;\n        transition: all 0.16s cubic-bezier(0.55, 0.085, 0.68, 0.53);\n      }\n      &:hover {\n        &:after {\n          opacity: 1;\n          transform: translate(10px, 10px);\n          transition-delay: 0.08s;\n        }\n      }\n    `}\n`\n\nexport default Card\n\nexport const CardHeader = styled.div`\n  display: flex;\n  align-items: flex-start;\n  img {\n    max-height: 2rem;\n    margin-right: 1rem;\n  }\n  h1 {\n    flex: 1;\n  }\n`\n\nexport const CardHeading = styled(Heading)`\n  margin-bottom: ${glsp()};\n  position: relative;\n  letter-spacing: 0.5px;\n  img {\n    max-height: 1.5rem;\n    margin-right: 0.75rem;\n  }\n`\n\nexport const CardFooter = styled.div`\n  margin-top: auto;\n`\n\nexport const CardList = styled.ul`\n  ${listReset()};\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  grid-gap: ${glsp(2)};\n  ${Card} {\n    height: 100%;\n  }\n  li {\n    grid-column: auto / span 6;\n\n    /* Small up */\n    ${media.smallUp`\n      grid-column: auto / span 3;\n    `}\n\n    /* Large up */\n    ${media.largeUp`\n      grid-column: auto / span 2;\n    `}\n  }\n`\n","import React from \"react\"\nimport styled, { css } from \"styled-components\"\n\nimport { visuallyHidden } from \"./helpers\"\nimport { themeVal } from \"./utils/general\"\nimport { glsp } from \"./utils/theme-values\"\nimport Heading, { headingAlt } from \"./type/heading\"\nimport Constrainer from \"./constrainer\"\nimport Card from \"./card\"\nimport media from \"./utils/media-queries\"\n\nconst getColumnLayout = ({ columnLayout }) => {\n  if (columnLayout === \"1:1\") return \"1fr 1fr\"\n  if (columnLayout === \"2:1\") return \"2fr 1fr\"\n  if (columnLayout === \"3:1\") return \"3fr 1fr\"\n  return \"inherit\"\n}\n\nexport const Inpage = styled.article`\n  display: grid;\n  height: 100%;\n  grid-template-rows: auto 1fr;\n`\n\nexport const InpageInnerColumns = styled(Constrainer)`\n  display: grid;\n  grid-template-columns: 1fr;\n  padding-top: ${glsp(1)};\n  padding-bottom: ${glsp(2)};\n  ${media.mediumUp`\n    grid-template-columns: ${getColumnLayout};\n    gap: ${glsp(4)};\n    padding-top: ${glsp(2)};\n  `}\n  & > section > ${Card} {\n    margin-top: 1rem;\n    display: block;\n  }\n  & > * {\n    margin-bottom: 2rem;\n    ${media.mediumUp`\n      margin-bottom: 0;\n    `}\n  }\n`\n\nexport const InpageHeader = styled.header`\n  /* Visually hidden */\n  ${({ isHidden }) =>\n    isHidden &&\n    css`\n      ${visuallyHidden()}\n    `}\n  padding-bottom: ${glsp(2)};\n`\n\nexport const InpageHeaderInner = styled(Constrainer)`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: space-between;\n  padding: ${glsp(4)} ${glsp()};\n`\n\nexport const InpageHeadline = styled.div`\n  display: flex;\n  flex-flow: column;\n  min-width: 0;\n  > *:first-child {\n    margin-bottom: ${glsp()};\n  }\n  > *:last-child {\n    margin-bottom: ${glsp()};\n  }\n`\n\nexport const InpageToolbar = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  padding-left: ${glsp(2)};\n  margin-left: auto;\n`\n\nexport const InpageTitleWrapper = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  min-width: 0;\n  margin-bottom: ${glsp(1.5)};\n`\n\nexport const InpageTitle = styled(({ ...props }) => <Heading {...props} />)`\n  margin-bottom: ${glsp(0.5)};\n  line-height: 3rem;\n`\n\nexport const InpageTagline = styled.p`\n  ${headingAlt()}\n  font-size: 0.875rem;\n  line-height: 1rem;\n`\n\nconst getBodyStyles = ({ variation }) => {\n  if (variation === \"dark\")\n    return css`\n      background-color: ${themeVal(\"color.base\")};\n      & * {\n        color: ${themeVal(\"color.surface\")};\n        border-color: ${themeVal(\"color.surface\")};\n        &:after {\n          background-color: ${themeVal(\"color.surface\")};\n        }\n        a {\n          color: ${themeVal(\"color.surface\")};\n          text-decoration: underline;\n        }\n      }\n    `\n  else if (variation === \"blue\")\n    return css`\n      background-color: ${themeVal(\"color.primary\")};\n      & * {\n        color: ${themeVal(\"color.surface\")};\n        border-color: ${themeVal(\"color.surface\")};\n        &:after {\n          background-color: ${themeVal(\"color.surface\")};\n        }\n        a {\n          color: ${themeVal(\"color.surface\")};\n          text-decoration: underline;\n        }\n        a:visited {\n          color: ${themeVal(\"color.surface\")};\n        }\n      }\n    `\n  return css`\n    background-color: transparent;\n  `\n}\n\nexport const InpageBody = styled.section`\n  ${getBodyStyles};\n  & ~ & {\n    padding-top: ${glsp(2)};\n    padding-bottom: ${glsp(2)};\n  }\n  p > img {\n    display: block;\n    margin: 1rem auto;\n    max-width: 100%;\n  }\n`\n\nexport const InpageBodyInner = styled(Constrainer)`\n  padding: ${glsp(2)} ${glsp()};\n\n  & ~ & {\n    padding: ${glsp()};\n  }\n`\n"],"sourceRoot":""}